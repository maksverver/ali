Most Important Item: write an actual game!

 - TODO: move builtin variables, so these variables can be added in the 
         interpreter without breaking compatibility with existing modules.
         (use negative indices, just as with functions?)

 - later: better parser (Ea
 

 - later: support multiple parsing contexts, with different prompts, and a
          way to swap between them. This allows easier implementation of
          choices.
   proposal: separate command sections, identified by symbols, and a new
   function to change the active command set?

   e.g.:
    function initialize() {
        set_context(:intro);
    }
    context :default;
        LOOK { writeln("You are in a room") }
    context :intro "Would you like an introduction [yes/no]";
        Y, YES { writeln("Blablabla"); set_context(:default); }
        N, NO { set_context(:default); }



alic:
 - (maybe later:) support for forward declarations of functions/procedures?
 - generate more compact grammar (specifically, generate rules with more than
   two symbols on the RHS whenever useful).
 - attempt to re-use existing function/procedures.
   mostly useful when different commands have the same guard (e.g. @loc = :x)

ali:
 - BUG: the interpreter will hang on (nearly) infinite loops

 - support more or more general forms?
   currently, sentences like: "TELL JOHN TO OPEN THE DOOR" don't work.

 - remove English text from interpreter
   (or at least allow the game to override them?)

General:
- Check memory use with valgrind (interpreter only?)
  Must disable mudflap before doing this.
- (maybe later:) richer fragment matching (e.g. "[THE] [BIG] (BOX/CHEST)")

Documentation:
 - finish language documentation
Later:
 - write tutorial?
